---
title: "Homework 3"
author: "Odile Gabbiani"
format:
  html: 
    toc: true # includes a table of contents in rendered html format
execute: # for all code chunks
    warning: false # do not display warnings
    message: false # do not display messages
---



## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
library(tidyverse)
library(readxl)
library(here)
library(janitor)
library(GGally)
library(MuMIn)
library(ggeffects)
library(gtsummary)
library(flextable)
library(modelsummary)

drought_exp <- read_xlsx(path = here("data", 
                                     "Valliere_etal_EcoApps_Data.xlsx"),
                         sheet = "First Harvest")

# quick look at data 
str(drought_exp)
class(drought_exp)
```

You can add options to executable code like this

```{r}
drought_exp_clean <- drought_exp %>% 
  clean_names() %>% # nicer column names
  mutate(species_name = case_when( # adding column with species scientific names
    species == "ENCCAL" ~ "Encelia californica", # bush sunflower
    species == "ESCCAL" ~ "Eschscholzia californica", # California poppy
    species == "PENCEN" ~ "Penstemon centranthifolius", # Scarlet bugler
    species == "GRICAM" ~ "Grindelia camporum", # great valley gumweed
    species == "SALLEU" ~ "Salvia leucophylla", # Purple sage
    species == "STIPUL" ~ "Nasella pulchra", # Purple needlegrass
    species == "LOTSCO" ~ "Acmispon glaber" # deerweed
  )) %>% 
  relocate(species_name, .after = species) %>% # moving species_name column after species
  mutate(water_treatment = case_when( # adding column with full treatment names
    water == "WW" ~ "Well watered",
    water == "DS" ~ "Drought stressed"
  )) %>% 
  relocate(water_treatment, .after = water) # moving water_treatment column after water
```



```{r}
ggpairs(drought_exp_clean, # data frame
        columns = c("leaf_dry_weight_g", # columns to visualize
                    "sla", 
                    "shoot_g", 
                    "root_g", 
                    "total_g"), 
        upper = list(method = "pearson")) + # calculating Pearson correlation coefficient
  theme_bw() + # cleaner theme
  theme(panel.grid = element_blank()) # getting rid of gridlines
```



```{r}
ggplot(data = drought_exp_clean, # data frame
       aes(x = reorder(species_name, # reordering x-axis
                       -total_g, # in reverse order of mean total mass
                       fun = mean), # calculating mean to reorder
           y = total_g)) + # y-axis
  geom_jitter(width = 0.1, # narrow jitter
              height = 0) # not jittering points up and down
```

```{r}
ggplot(data = drought_exp_clean, # data frame
       aes(x = water_treatment, # x-axis
           y = total_g)) + # y-axis
  geom_jitter(width = 0.1, # narrow jitter
              height = 0) # not jittering points up and down
```

```{r}
ggplot(data = drought_exp_clean, # data frame
       aes(x = sla, # x-axis
           y = total_g)) + # y-axis
  geom_point() # scatterplot
```

```{r}
model0 <- lm(total_g ~ 1, # formula
             data = drought_exp_clean) # data frame
```


```{r}
model1 <- lm(total_g ~ sla + water_treatment + species_name,
             data = drought_exp_clean)

par(mfrow = c(2, 2))
plot(model1)
# you might get a warning when you run this code - that is ok!
```

```{r}
model2 <- lm(total_g ~ sla + water_treatment,
             data = drought_exp_clean)

plot(model2)
```

```{r}
model3 <- lm(total_g ~ sla + species_name,
             data = drought_exp_clean)

plot(model3)
```


```{r}
model4 <- lm(total_g ~ water_treatment + species_name, 
             data = drought_exp_clean)
plot(model4)
```

```{r}
model.sel <- model.sel(model0,
          model1, 
          model2, 
          model3, 
          model4)

flextable::as_flextable(model.sel)
```


```{r}

modelsummary::modelsummary( # this function takes a list of models
  list( 
    "null" = model0, # "model name" = model object
    "model 1" = model1,
    "model 2" = model2,
    "model 3" = model3, 
    "model 4" = model4), 
  title = "Table 1: Model Comparison", 
  gof_map = c("aic")
) 


```


```{r}
model_preds <- ggpredict(model4, 
                         terms = c("water_treatment", 
                                   "species_name"))
```

```{r}
plot(model_preds, # model predictions
     limit_range = TRUE, # limit the range of predictions to the range of predictor values
     show_data = TRUE) + # show the underlying data
  # everything below this is ggplot() stuff
  theme_classic() + # classic theme
  labs(title = "Preliminary model visualization") + # plot title
  theme(panel.grid = element_blank()) # getting rid of gridlines
```

```{r}
model_preds_for_plotting <- model_preds %>% 
  rename(water_treatment = x,
         species_name = group)

# use View(model_preds_for_plotting) 
# to compare this to the original model_preds data frame

ggplot() +
  # underlying data
  geom_point(data = drought_exp_clean,
             alpha = 0.3,
             aes(x = water_treatment,
                 y = total_g,
                 color = water_treatment)) +
  # model prediction 95% CI ribbon
geom_errorbar(data = model_preds_for_plotting,
             aes(x = water_treatment, 
                  y = predicted,
                  ymin = conf.low,
                  ymax = conf.high,
                  fill = water_treatment),
              alpha = 0.2, width = 0.2) +
  # model prediction lines
  geom_point(data = model_preds_for_plotting,
            aes(x = water_treatment, 
                y = predicted,
                color = water_treatment)) +
  # cleaner theme
  theme_classic() +
  # creating different panels for species
  facet_wrap(~species_name) + 
  theme(legend.position = "none") + 
  labs(x = "Water Treatment", 
       y = "Total Biomass (g)", 
       title = "Figure 1: Total Biomass (g) as predicted by Water Treatment and Plant Species") + 
  scale_color_manual(values = c("Well watered" = "orchid3", 
                                "Drought stressed" = "olivedrab4"))
```


2. Affective Visualization 
a. The data I took over the course of this class describes the number and species of birds seen perching on an artificial floating wetland island (FWI) on the UCSB Lagoon. An affectively visualization of my data could consist of birds sitting on pilings of different heights to represent how often each bird species was seen. Each piling would correspond to a different bird and that would be represented by having that specific species sitting atop it. While the pilings don't represent exactly where the birds were seen perching, they do give an idea of how many birds of each species were seen. 

b. 

c. 

d. UCSB Lagoon Birds: this piece shows the number of bird species seen perching on an artificial floating wetland island (FWI) at the UCSB Lagoon over a period of five months, from January to May 2024. Each piling represents a different observed bird species and the piling's heights represent how many of those birds were seen. This piece is a Caran D'ache color pencil drawing that also incorporates Archival Ink pens to outline certain aspects of the visualization. To make this, I first made a sketch of what I wanted it to look like, which I transferred onto paper. I found images of the six bird species seen on the UCSB Lagoon and I drew them on top of the pilings. I did everything in pencil first, then added color, and finished by adding touches of ink.   

3. Statistical Critique 
a. To address their main research question (are CFWs effective in removing N and P from aquatic systems?), the authors used a variety of tests including Levene's Test, Kruskall Wallis Test, Spearman's R Correlation Coefficient, and Linear Regression. The authors did not include a visualization of their data in the article but they do have tables listing data points and showing the relationship between different variables. This is the table they included for the Spearman's R Correlation Coefficient.  

b. To visualize their data, I would suggest the authors use
